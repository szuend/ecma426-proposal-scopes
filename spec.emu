<!DOCTYPE html>
<meta charset="utf8">
<link rel="stylesheet" href="./spec.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css">
<script src="./spec.js"></script>
<pre class="metadata">
title: Scopes
stage: 3
contributors: Holger Benl, Simon ZÃ¼nd
</pre>

<emu-clause id="sec-source-map-format">
  <h1>Additions to the <a href="https://tc39.es/ecma426/#source-map-format" target="_blank" rel="noopener noreferrer">Source map format</a></h1>
  <p>The source map JSON document contains the following additional fields:</p>
  <emu-table>
    <emu-caption>Added source map JSON fields</emu-caption>
    <table>
      <tr><th>Field</th><th>Description</th></tr>
      <tr>
        <td>`"scopes"`</td>
        <td>
          an optional string. The string itself is a comma (`,`) separated list of encoded items. Each items as a list of VLQ encoded unsigned or signed numbers. Clause <emu-xref href="#sec-format"></emu-xref> describes the grammar of the string.
        </td>
      </tr>
      <tr>
        <td>`"expressions"`</td>
        <td>
          an optional list of strings. The list may also contain the value `null`. This is a string table similar to `"names"` but holds JavaScript expressions.
        </td>
      </tr>
    </table>
  </emu-table>
</emu-clause>

<emu-clause id="sec-types">
  <h1>Data Types</h1>
  <p>The proposal defines several new types.</p>

  <emu-clause id="sec-scope-information-record-type">
    <h1>The Scope Information Record Type</h1>
    <p>Decoding the `"scopes"` field results in a <dfn>Scope Information Record</dfn>. The resulting Scope Information record will be added to the existing <a href="https://tc39.es/ecma426/#decoded-source-map">decoded source map struct</a>.</p>
    <emu-table id="table-scope-information-record-fields" caption="Scope Information Record Fields">
      <table>
        <thead>
          <tr>
            <th>Field Name</th>
            <th>Value</th>
            <th>Meaning</th>
          </tr>
        </thead>
        <tr>
          <td>[[OriginalScopes]]</td>
          <td>a List of Original Scope Tree Records</td>
          <td>todo</td>
        </tr>
        <tr>
          <td>[[GeneratedRanges]]</td>
          <td>a List of Generated Range Records</td>
          <td>todo</td>
        </tr>
      </table>
    </emu-table>
  </emu-clause>

  <emu-clause id="sec-original-scope-tree-record-type">
    <h1>The Original Scope Tree Record Type</h1>
    <p>The <dfn variants="Original Scope Tree Records">Original Scope Tree Record</dfn> describes the scope tree for an original (authored) file. It corresponds directly to one entry in the `"sources"` list.</p>
    <emu-table id="table-original-scope-tree-record-fields" caption="Original Scope Tree Record Fields">
      <table>
        <thead>
          <tr>
            <th>Field Name</th>
            <th>Value</th>
            <th>Meaning</th>
          </tr>
        </thead>
        <tr>
          <td>[[SourceIndex]]</td>
          <td>a Number</td>
          <td>An index into the `"sources"` list of a source map.</td>
        </tr>
        <tr>
          <td>[[Root]]</td>
          <td>a Original Scope Record</td>
          <td>The top-level/root scope.</td>
        </tr>
      </table>
    </emu-table>
  </emu-clause>

  <emu-clause id="sec-original-scope-record-type">
    <h1>The Original Scope Record Type</h1>
    <p>The <dfn variants="Original Scope Records">Original Scope Record</dfn> describes a scope in an original (authored) file.</p>
    <emu-table id="table-original-scope-record-fields" caption="Original Scope Record Fields">
      <table>
        <thead>
          <tr>
            <th>Field Name</th>
            <th>Value</th>
            <th>Meaning</th>
          </tr>
        </thead>
        <tr>
          <td>[[StartLine]]</td>
          <td>a Number</td>
          <td>The line number where this scope starts.</td>
        </tr>
        <tr>
          <td>[[StartColumn]]</td>
          <td>a Number</td>
          <td>The column number where this scope starts (inclusive).</td>
        </tr>
        <tr>
          <td>[[EndLine]]</td>
          <td>a Number</td>
          <td>The line number where this scope ends.</td>
        </tr>
        <tr>
          <td>[[EndColumn]]</td>
          <td>a Number</td>
          <td>The column number where this scope ends (exclusive).</td>
        </tr>
        <tr>
          <td>[[Name]]</td>
          <td>a String or *null*</td>
          <td>The original name of this scope. E.g. the original class or function name.</td>
        </tr>
        <tr>
          <td>[[Kind]]</td>
          <td>a String or *null*</td>
          <td>Debuggers may use [[Kind]] to label this scope in a scope view. It is purely informative for users.</td>
        </tr>
        <tr>
          <td>[[IsStackFrame]]</td>
          <td>a Boolean</td>
          <td>Signifies whether this scope is something that can be called, e.g. a function or method.</td>
        </tr>
        <tr>
          <td>[[Variables]]</td>
          <td>a List of Strings</td>
          <td>The original variable names declared in this scope.</td>
        </tr>
        <tr>
          <td>[[Children]]</td>
          <td>a List of Original Scope Records</td>
          <td>The child scopes of this scope.</td>
        </tr>
      </table>
    </emu-table>
  </emu-clause>

  <emu-clause id="sec-generated-range-record-type">
    <h1>The Generated Range Record Type</h1>
    <p>The <dfn variants="Generated Range Records">Generated Range Record</dfn> describes a range in the generated file. The spec uses the name "range" instead of "scope" because ranges may not correspond to lexical scopes in the generated language.</p>
    <emu-table id="table-generated-range-record-fields" caption="Generated Range Record Fields">
      <table>
        <thead>
          <tr>
            <th>Field Name</th>
            <th>Value</th>
            <th>Meaning</th>
          </tr>
        </thead>
        <tr></tr>
        <tr><td>[[StartLine]]</td>
          <td>a Number</td>
          <td>The line number where this range starts.</td></tr>
        <tr>
          <td>[[StartColumn]]</td>
          <td>a Number</td>
          <td>The column number where this range starts (inclusive).</td>
        </tr>
        <tr>
          <td>[[EndLine]]</td>
          <td>a Number</td>
          <td>The line number where this range ends.</td>
        </tr>
        <tr>
          <td>[[EndColumn]]</td>
          <td>a Number</td>
          <td>The column number where this range ends (exclusive).</td>
        </tr>
        <tr>
          <td>[[Definition]]</td>
          <td>a Original Scope Record or *null*</td>
          <td>The corresponding original scope</td>
        </tr>
        <tr>
          <td>[[IsStackFrame]]</td>
          <td>a Boolean</td>
          <td>Whether this generated range is a JavaScript/Wasm function.</td>
        </tr>
        <tr>
          <td>[[IsHidden]]</td>
          <td>a Boolean</td>
          <td>Whether this generated range is a compiler/transpiler inserted JavaScript/Wasm function even though [[Definition]] is not *null*. E.g. a original block scope was transpiled to a JS function. If [[IsHidden]] is *true*, then [[IsStackFrame]] must also be true.</td>
        </tr>
        <tr>
          <td>[[Bindings]]</td>
          <td>a List of Strings</td>
          <td>A list of JavaScript expressions that when evaluated in this generated range, evaluates to the value of the corresponding variable.</td>
        </tr>
        <tr>
          <td>[[SubRangeBindings]]</td>
          <td>a List of Sub-Range Binding Records</td>
          <td>TODO</td>
        </tr>
        <tr>
          <td>[[CallSite]]</td>
          <td>a Call Site Record or *null*</td>
          <td>The presence of [[CallSite]] signifies that this generated range represents an inlined original scope body. [[Definition]] must contain a valid reference and the Original Scope Record behind [[Definition]] must have the value *true* in it's [[IsStackFrame]] field.</td>
        </tr>
        <tr>
          <td>[[Children]]</td>
          <td>a List of Generated Range Records</td>
          <td>The child ranges of this range.</td>
        </tr>
      </table>
    </emu-table>

    <emu-clause id="sec-call-site-record-type">
      <h1>The Call Site Record Type</h1>
      <p>The <dfn>Call Site Record</dfn> is a position in the original (authored) source with a function call. In the generated code, the function was then inlined, i.e. the call was replaced with the function body itself.</p>
      <emu-table id="table-call-site-record-fields" caption="Call Site Record Fields">
        <table>
          <thead>
            <tr>
              <th>Field Name</th>
              <th>Value</th>
              <th>Meaning</th>
            </tr>
          </thead>
          <tr>
            <td>[[SourceIndex]]</td>
            <td>a Number</td>
            <td>An index into the `"sources"` list of a source map.</td>
          </tr>
          <tr>
            <td>[[Line]]</td>
            <td>a Number</td>
            <td>The line number inside the file represented by [[SourceIndex]].</td>
          </tr>
          <tr>
            <td>[[Column]]</td>
            <td>a Number</td>
            <td>Teh column number inside [[Line]].</td>
          </tr>
        </table>
      </emu-table>
    </emu-clause>

    <emu-clause id="sec-sub-range-binding-record-type">
      <h1>The Sub-Range Binding Record</h1>
      <p>The <dfn variant="Sub-Range Binding Records">Sub-Range Binding Record</dfn> describe a variable that requires different JavaScript expressions in different parts of a generated range to retrieve the variables value.</p>
      <emu-table id="table-sub-range-binding-record-fields" caption="Sub-Range Binding Record Fields">
        <table>
          <thead>
            <tr>
              <th>Field Name</th>
              <th>Value</th>
              <th>Meaning</th>
            </tr>
          </thead>
          <tr>
            <td>[[VariableIndex]]</td>
            <td>a Number</td>
            <td>An index into the [[Variables]] List of the corresponding Original Scope Record for which these expressions can be used.</td>
          </tr>
          <tr>
            <td>[[Bindings]]</td>
            <td>a List of Binding Records</td>
            <td>TODO</td>
          </tr>
        </table>
      </emu-table>
    </emu-clause>

    <emu-clause id="sec-binding-record-type">
      <h1>The Binding Record</h1>
      <p>The <dfn variant="Binding Records">Binding Record</dfn> describes a JavaScript expression that must be used for the given position to retrieve a specific variables value.</p>
      <emu-table id="table-binding-record-fields" caption="Binding Record Fields">
        <table>
          <thead>
            <tr>
              <th>Field Name</th>
              <th>Value</th>
              <th>Meaning</th>
            </tr>
          </thead>
          <tr>
            <td>[[FromLine]]</td>
            <td>a Number</td>
            <td>TODO</td>
          </tr>
          <tr>
            <td>[[FromColumn]]</td>
            <td>a Number</td>
            <td>TODO</td>
          </tr>
          <tr>
            <td>[[Binding]]</td>
            <td>a String</td>
            <td>TODO</td>
          </tr>
        </table>
      </emu-table>
    </emu-clause>
  </emu-clause>
</emu-clause>

<emu-clause id="sec-specification-types">
  <h1>Specification Types</h1>
  <p>The encoding format heavily uses relative numbers to save bytes. The Decode State Record, Decode Original Scope State Record and Decode Generated Range State Record keep track of the absolute values.</p>

  <emu-clause id="sec-decode-state-record-type">
    <h1>The Decode State Record Specification Type</h1>
    <p>The <dfn>Decode State Record</dfn> tracks global decoding state.</p>
    <emu-table id="table-decode-state-record-fields" caption="Decode State Record Fields">
      <table>
        <thead>
          <tr>
            <th>Field Name</th>
            <th>Value</th>
            <th>Meaning</th>
          </tr>
        </thead>
        <tr>
          <td>[[OriginalScopes]]</td>
          <td>a List of Original Scope Records</td>
          <td>|Definition| in |GeneratedRangeStart| is encoded as an index into this list. Note that this field is different from [[OriginalScopes]] in the Scope Information Record: This field is a flat list of all Original Scope Records in prefix order.</td>
        </tr>
      </table>
    </emu-table>
  </emu-clause>

  <emu-clause id="sec-decode-original-scope-state-record-type">
    <h1>The Decode Original Scope State Record Specification Type</h1>
    <p>The <dfn>Decode Original Scope State Record</dfn> keeps track of relative numbers while decoding a Original Scope Tree Record.</p>
    <emu-table id="table-decode-original-scope-state-record-fields" caption="Decode Original Scope State Record Fields">
      <table>
        <thead>
          <tr>
            <th>Field Name</th>
            <th>Value</th>
            <th>Meaning</th>
          </tr>
        </thead>
        <tr>
          <td>[[SourceIndex]]</td>
          <td>a Number or *null*.</td>
          <td>Records the last occurrence of |OriginalScopeSourceRef|, if any.</td>
        </tr>
        <tr>
          <td>[[Line]]</td>
          <td>a Number</td>
          <td>|Line| in |OriginalScopeStart| and |OriginalScopeEnd| are relative. This field tracks the actual line number.</td>
        </tr>
        <tr>
          <td>[[NameIndex]]</td>
          <td>a Number</td>
          <td>|Name| in |OriginalScopeStart| is relative. This field tracks the absolute name index.</td>
        </tr>
        <tr>
          <td>[[KindIndex]]</td>
          <td>a Number</td>
          <td>|Kind| in |OriginalScopeStart| is relative. This field tracks the absolute kind index.</td>
        </tr>
        <tr>
          <td>[[VariableIndex]]</td>
          <td>a Number</td>
          <td>The variables in |OriginalScopeVariables| are relative. This field tracks the absolute variable name index.</td>
        </tr>
      </table>
    </emu-table>
  </emu-clause>

  <emu-clause id="sec-decode-generated-range-state-record-type">
    <h1>The Decode Generated Range State Record Specification Type</h1>
    <p>The <dfn>Decode Generated Range State Record</dfn> keeps track of relative numbers while decoding a top-level Generated Range Record.</p>
    <emu-table id="table-decode-generated-range-state-record-fields" caption="Decode Generated Range State Record Fields">
      <table>
        <thead>
          <tr>
            <th>Field Name</th>
            <th>Value</th>
            <th>Meaning</th>
          </tr>
        </thead>
        <tr>
          <td>[[Line]]</td>
          <td>a Number</td>
          <td>|Line| in |GeneratedRangeStart| and |GeneratedRangeEnd| are relative. This field tracks the actual line number.</td>
        </tr>
        <tr>
          <td>[[Column]]</td>
          <td>a Number</td>
          <td>|Column| in |GeneratedRangeStart| and |GeneratedRangeEnd| are relative. This field track the actual column number.</td>
        </tr>
        <tr>
          <td>[[Definition]]</td>
          <td>a Number</td>
          <td>The definition in |GeneratedRangeStart| is relative. This field tracks the absolute value.</td>
        </tr>
        <tr>
          <td>[[BindingIndex]]</td>
          <td>a Number</td>
          <td>The bindings in |GeneratedRangeBindings| and |SubRangeBinding|s are relative. This field tracks the absolute binding expression index.</td>
        </tr>
        <tr>
          <td>[[BindingVariableIndex]]</td>
          <td>a Number</td>
          <td>The |VariableIndex| in |SubRangeBinding| is relative. This field tracks the absolute value.</td>
        </tr>
        <tr>
          <td>[[BindingFromLine]]</td>
          <td>a Number</td>
          <td>The |Line| in |SubRangeBinding| is relative. This field tracks the absolute value.</td>
        </tr>
        <tr>
          <td>[[BindingFromColumn]]</td>
          <td>a Number</td>
          <td>The |Column| in |SubRangeBinding| is relative. This field tracks the absolute value.</td>
        </tr>
        <tr>
          <td>[[CallSiteSourceIndex]]</td>
          <td>a Number</td>
          <td>The source reference in |CallSite| is relative. This field tracks the absolute value.</td>
        </tr>
        <tr>
          <td>[[CallSiteLine]]</td>
          <td>a Number</td>
          <td>The line in |CallSite| is relative. This field tracks the absolute value.</td>
        </tr>
      </table>
    </emu-table>
  </emu-clause>
</emu-clause>

<emu-clause id="sec-abstract-operations">
  <h1>Abstract Operations</h1>

  <emu-clause id="sec-decode-op" type="abstract operation">
    <h1>
      Decode (
        _scopes_: a |Scopes| Parse Node.,
      ): a Scope Information Record.
    </h1>
    <dl class="header">
      <dt>description</dt>
      <dd>TODO</dd>
    </dl>
    <emu-alg>
      1. Let _globalState_ be a new Decode State Record.
      1. Let _info_ be a new Scope Information Record.
      1. Set _info_.[[OriginalScopes]] to a new empty List.
      1. Set _info_.[[GeneratedRanges]] to a new empty List.
      1. Perform DecodeItem on _scopes_ with arguments _globalState_ and _info_.
      1. Return _info_.
    </emu-alg>
  </emu-clause>
</emu-clause>

<emu-clause id="sec-format">
  <h1>`"scopes"` grammar</h1>
  <p>The `"scopes"` string must result in a successful parse starting at the |Scopes| goal symbol.</p>
  <emu-grammar type="definition">
    Scopes :
      ItemList

    ItemList :
      TopLevelItem
      ItemList `,` TopLevelItem

    TopLevelItem :
      OriginalScopeTree
      GeneratedRangeTree
      UnknownItem
  </emu-grammar>

  <emu-clause id="sec-decode-item" type="sdo">
    <h1>
      DecodeItem (
        _globalState_: a Decode State Record,
        _info_: a Scope Information Record,
      )
    </h1>
    <dl class="header"></dl>
    <emu-grammar>ItemList : ItemList `,` TopLevelItem</emu-grammar>
    <emu-alg>
      1. Perform DecodeItem of |ItemList| with arguments _globalState_ and _info_.
      1. Perform DecodeItem of |TopLevelItem| with arguments _globalState_ and _info_.
    </emu-alg>
    <emu-grammar>TopLevelItem : OriginalScopeTree</emu-grammar>
    <emu-alg>
      1. Let _state_ be a new Decode Original Scope State Record.
      1. Let _root_ be DecodeScope of |OriginalScopeTree| with arguments _globalState_ and _state_.
      1. Let _idx_ be _state_.[[SourceIndex]].
      1. If _idx_ is *null*, set _idx_ to the length of _info_.[[OriginalScopes]].
      1. Let _scope_ be a new Original Scope Tree Record.
      1. Set _scope_.[[Root]] to _root_.
      1. Set _scope_.[[SourceIndex]] to _idx_.
      1. Append _scope_ to _info_.[[OriginalScopes]].
    </emu-alg>
    <emu-grammar>TopLevelItem : GeneratedRangeTree</emu-grammar>
    <emu-alg>
      1. Let _state_ be a new Decode Generated Range State Record.
      1. Let _range_ be DecodeRange on |GeneratedRangeTree| with arguments _globalState_ and _state_.
      1. Append _range_ to _info_.[[GeneratedRanges]].
    </emu-alg>
  </emu-clause>

  <emu-clause id="sec-format-scopes">
    <h1>Original Scope Format</h1>
    <emu-grammar type="definition">
      OriginalScopeTree :
        OriginalScopeStart OriginalScopeItemList? `,` OriginalScopeEnd

      OriginalScopeItemList :
        `,` OriginalScopeItem
        OriginalScopeItemList `,` OriginalScopeItem

      OriginalScopeItem :
        OriginalScopeVariables
        OriginalScopeSourceRef
        OriginalScopeTree
        UnknownItem

      OriginalScopeStart :
        `B` Line Column Flags Name? Kind?

      OriginalScopeEnd :
        `C` Line Column

      OriginalScopeVariables :
        `D` VlqList

      OriginalScopeSourceRef :
        `E` SourceRef
    </emu-grammar>

    <emu-clause id="sec-decode-scope" type="sdo">
      <h1>
        DecodeScope (
          _globalState_: a Decode State Record,
          _state_: a Decode Original Scope State Record,
        ): a Original Scope Record
      </h1>
      <dl class="header"></dl>
      <emu-grammar>
        OriginalScopeTree :
          OriginalScopeStart OriginalScopeItemList? `,` OriginalScopeEnd
      </emu-grammar>
      <emu-alg>
        1. Let _scope_ be a new Original Scope Record.
        1. Append _scope_ to _globalState_.[[OriginalScopes]].
        1. Perform DecodeScopeItem of |OriginalScopeStart| with arguments _globalState_, _state_ and _scope_.
        1. If |OriginalScopeItemList| is present, perform DecodeScopeItem with arguments _globalState_, _state_ and _scope_.
        1. Perform DecodeScopeItem of |OriginalScopeEnd| with arguments _globalState_, _state_ and _scope_.
        1. Return _scope_.
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-decode-scope-item" type="sdo">
      <h1>
        DecodeScopeItem (
          _globalState_: a Decode State Record,
          _state_: a Decode Original Scope State Record,
          _scope_: a Original Scope Record,
        )
      </h1>
      <dl class="header"></dl>
      <emu-grammar>
        OriginalScopeStart :
          `B` Line Column Flags Name? Kind?
      </emu-grammar>
      <emu-alg>
        1. Set _state_.[[Line]] to _state_.[[Line]] + DecodeUnsignedVlq(|Line|).
        1. Set _state_.[[Column]] to DecodeUnsignedVlq(|Column|).
        1. Set _scope_.[[StartLine]] to _state_.[[Line]].
        1. Set _scope_.[[StartColumn]] to _state_.[[Column]].
        1. Let _flags_ be DecodeUnsignedVlq(|Flags|).
        1. Assert: _flags_ & 0x1 > 0, if and only if |Name| is present.
        1. Assert: _flags_ & 0x2 > 0, if and only if |Kind| is present.
        1. If |Name| is present, then
          1. Set _state_.[[NameIndex]] to _state_.[[NameIndex]] + DecodeSignedVlq(|Name|).
          1. Set _scope_.[[Name]] to ResolveName(_state_.[[NameIndex]]).
        1. If |Kind| is present, then
          1. Set _state_.[[KindIndex]] to _state_.[[KindIndex]] + DecodeSignedVlq(|Kind|).
          1. Set _scope_.[[Kind]] to ResolveName(_state_.[[NameIndex]]).
        1. If _flags_ & 0x4 > 0, set _scope_.[[IsStackFrame]] to *true*.
      </emu-alg>
      <emu-grammar>
        OriginalScopeEnd :
          `C` Line Column
      </emu-grammar>
      <emu-alg>
        1. Set _state_.[[Line]] to _state_.[[Line]] + DecodeUnsignedVlq(|Line|).
        1. Set _state_.[[Column]] to DecodeUnsignedVlq(|Column|).
        1. Set _scope_.[[EndLine]] to _state_.[[Line]].
        1. Set _scope_.[[EndColumn]] to _state_.[[Column]].
      </emu-alg>
      <emu-grammar>
        OriginalScopeItemList :
          OriginalScopeItemList `,` OriginalScopeItem
      </emu-grammar>
      <emu-alg>
        1. Perform DecodeScopeItem of |OriginalScopeItemList| with arguments _globalState_, _state_ and _scope_.
        1. Perform DecodeScopeItem of |OriginalScopeItem| with arguments _globalState_, _state_ and _scope_.
      </emu-alg>
      <emu-grammar>
        OriginalScopeItem :
          OriginalScopeTree
      </emu-grammar>
      <emu-alg>
        1. Let _child_ be DecodeScope of |OriginalScopeTree| with arguments _globalState_ and _state_.
        1. Append _child_ to _scope_.[[Children]].
      </emu-alg>
      <emu-grammar>
        OriginalScopeVariables :
          `D` VlqList
      </emu-grammar>
      <emu-alg>
        1. Let _variableIndices_ be DecodeSignedVlqList(|VlqList|).
        1. For each element _index_ of _variableIndices_, do
          1. Set _state_.[[VariableIndex]] to _state_.[[VariableIndex]] + _index_.
          1. Append ResolveName(_state_.[[VariableIndex]]) to _scope_.[[Variables]].
      </emu-alg>
      <emu-grammar>
        OriginalScopeSourceRef :
          `E` SourceRef
      </emu-grammar>
      <emu-alg>
        1. Set _state_.[[SourceIndex]] to DecodeUnsignedVlq(|SourceRef|).
      </emu-alg>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-format-ranges">
    <h1>Generated Range Format</h1>
    <emu-grammar type="definition">
      GeneratedRangeTree :
        GeneratedRangeStart GeneratedRangeItemList? `,` GeneratedRangeEnd

      GeneratedRangeItemList :
        `,` GeneratedRangeItem
        GeneratedRangeItemList `,` GeneratedRangeItem

      GeneratedRangeItem :
        GeneratedRangeBindings
        SubRangeBinding
        CallSite
        GeneratedRangeTree
        UnknownItem

      GeneratedRangeStart :
        `F` Flags Column Line? Definition?

      GeneratedRangeEnd :
        `G` Column Line?

      GeneratedRangeBindings :
        `H` VlqList

      SubRangeBinding :
        `I` VariableIndex BindingFromList

      BindingFromList :
        BindingFrom
        BindingFromList BindingFrom

      BindingFrom :
        Line Column Vlq

      CallSite :
        `J` SourceRef Line Column
    </emu-grammar>

    <emu-clause id="sec-decode-range" type="sdo">
      <h1>
        DecodeRange (
          _globalState_: a Decode State Record,
          _state_: a Decode Generated Range State Record,
        ): a Generated Range Record
      </h1>
      <dl class="header"></dl>
      <emu-grammar>
        GeneratedRangeTree :
          GeneratedRangeStart GeneratedRangeItemList? `,` GeneratedRangeEnd
      </emu-grammar>
      <emu-alg>
        1. Let _range_ be a new Generated Range Record.
        1. Perform DecodeRangeItem of |GeneratedRangeStart| with arguments _globalState_, _state_ and _range.
        1. If |GeneratedRangeItemList| is present, perform DecodeRangeItem with arguments _globalState_, _state_ and _range_.
        1. Perform DecodeRangeItem of |GeneratedRangeEnd| with arguments _globalState_, _state_ and _range_.
        1. Return _range_.
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-decode-range-item" type="sdo">
      <h1>
        DecodeRangeItem (
          _globalState_: a Decode State Record,
          _state_: a Decode Generated Range State Record,
          _range_: a Generated Range Record,
        )
      </h1>
      <dl class="header"></dl>
      <emu-grammar>
        GeneratedRangeStart :
          `F` Flags Column Line? Definition?
      </emu-grammar>
      <emu-alg>
        1. Let _flags_ be DecodeUnsignedVlq(|Flags|).
        1. Assert: _flags_ & 0x1 > 0, if and only if |Line| is present.
        1. Assert: _flags_ & 0x2 > 0, if and only if |Definition| is present.
        1. If |Line| is present, then
          1. Let _relativeLine_ be DecodeUnsignedVlq(|Line|).
          1. Set _state_.[[Line]] to _state_.[[Line]] + _relativeLine_.
          1. If _relativeLine_ > 0, set _state_.[[Column]] to 0.
        1. Set _state_.[[Column]] to _state_.[[Column]] + DecodeUnsignedVlq(|Column|).
        1. Set _range_.[[StartLine]] to _state_.[[Line]].
        1. Set _range_.[[StartColumn]] to _state_.[[Column]].
        1. If |Definition| is present, then
          1. Set _state_.[[Definition]] to _state_.[[Definition]] + DecodeSignedVlq(|Definition|).
          1. Set _range_.[[Definition]] to _globalState_.[[OriginalScopes]][_state_.[[Definition]]].
          1. Set _state_.[[BindingVariableIndex]] to 0.
          1. Set _state_.[[BindingFromLine]] to _range_.[[StartLine]].
          1. Set _state_.[[BindingFromColumn]] to _range_.[[StartColumn]].
        1. If _flags_ & 0x4 > 0, set _state_.[[IsStackFrame]] to *true*.
        1. If _flags_ & 0x8 > 0, set _state_.[[IsHidden]] to *true*.
        1. Assert: If _state_.[[IsHidden]] is *true*, _state_.[[IsStackFrame]] must be *true*.
      </emu-alg>
      <emu-grammar>
        GeneratedRangeEnd :
          `G` Column Line?
      </emu-grammar>
      <emu-alg>
        1. If |Line| is present, then
          1. Let _relativeLine_ be DecodeUnsignedVlq(|Line|).
          1. Set _state_.[[Line]] to _state_.[[Line]] + _relativeLine_.
          1. If _relativeLine_ > 0, set _state_.[[Column]] to 0.
        1. Set _state_.[[Column]] to _state_.[[Column]] + DecodeUnsignedVlq(|Column|).
        1. Set _range_.[[EndLine]] to _state_.[[Line]].
        1. Set _range_.[[EndColumn]] to _state_.[[Column]].
      </emu-alg>
      <emu-grammar>
        GeneratedRangeItemList :
          GeneratedRangeItemList `,` GeneratedRangeItem
      </emu-grammar>
      <emu-alg>
        1. Perform DecodeRangeItem of |GeneratedRangeItemList| with arguments _globalState_, _state_ and _range_.
        1. Perform DecodeRangeItem of |GeneratedRangeItem| with arguments _globalState_, _state_ and _range_.
      </emu-alg>
      <emu-grammar>
        GeneratedRangeItem :
          GeneratedRangeTree
      </emu-grammar>
      <emu-alg>
        1. Let _child_ be DecodeRange of |GeneratedRangeTree| with arguments _globalState_ and _state_.
        1. Append _child_ to _range_.[[Children]].
      </emu-alg>
      <emu-grammar>
        GeneratedRangeBindings :
          `H` VlqList
      </emu-grammar>
      <emu-alg>
        1. Assert: _range_.[[Definition]] is not *null*.
        1. Let _bindingIndices_ be DecodeSignedVlqList(|VlqList|).
        1. For each element _index_ of _bindingIndices_, do
          1. Set _state_.[[BindingIndex]] to _state_.[[BindingIndex]] + _index_.
          1. Append ResolveExpression(_state_.[[BindingIndex]]) to _range_.[[Bindings]].
      </emu-alg>
      <emu-grammar>
        SubRangeBinding :
          `I` VariableIndex BindingFromList
      </emu-grammar>
      <emu-alg>
        1. Assert: _range_.[[Definition]] is not *null*.
        1. Set _state_.[[BindingVariableIndex]] to _state_.[[BindingVariableIndex]] + DecodeUnsignedVlq(|VariableIndex|).
        1. Let _binding_ be a new Sub-Range Binding Record.
        1. Set _binding_.[[VariableIndex]] to _state_.[[BindingVariableIndex]].
        1. Set _binding_.[[Bindings]] to a new empty List.
        1. Perform DecodeSubRangeBinding of |BindingFromList| with arguments _state_ and _binding_.
        1. Append _binding_ to _range_.[[SubRangeBindings]].
      </emu-alg>
      <emu-grammar>
        CallSite :
          `J` SourceRef Line Column
      </emu-grammar>
      <emu-alg>
        1. Assert: _range_.[[Definition]] is not *null*.
        1. Let _relativeSourceIndex_ be DecodeSignedVlq(|SourceRef|).
        1. Set _state_.[[CallSiteSourceIndex]] to _state_.[[CallSiteSourceIndex]] + _relativeSourceIndex_.
        1. If _relativeSourceIndex_ is 0, set _state_.[[CallSiteLine]] to 0.
        1. Set _state_.[[CallSiteLine]] to _state_.[[CallSiteLine]] + DecodeSignedVlq(|SourceRef|).
        1. Let _callSite_ be a new Call Site Record.
        1. Set _callSite_.[[SourceIndex]] to _state_.[[CallSiteSourceIndex]].
        1. Set _callSite_.[[Line]] to _state_.[[CallSiteLine]].
        1. Set _callSite_.[[Column]] to DecodeUnsignedVlq(|Column|).
        1. Set _range_.[[CallSite]] to _callSite_.
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-decode-sub-range-binding" type="sdo">
      <h1>
        DecodeSubRangeBinding (
          _state_: a Decode Generated Range State Record,
          _subRangeBinding_: a Sub-Range Binding Record,
        )
      </h1>
      <dl class="header"></dl>
      <emu-grammar>
        BindingFromList :
          BindingFromList BindingFrom
      </emu-grammar>
      <emu-alg>
        1. Perform DecodeSubRangeBinding of |BindingFromList| with arguments _state_ and _subRangeBinding_.
        1. Perform DecodeSubRangeBinding of |BindingFrom| with arguments _state_ and _subRangeBinding_.
      </emu-alg>
      <emu-grammar>
        BindingFrom :
          Line Column Vlq
      </emu-grammar>
      <emu-alg>
        1. Let _relativeLine_ be DecodeUnsignedVlq(|Line|).
        1. Set _state_.[[BindingFromLine]] to _state_.[[BindingFromLine]] + _relativeLine_.
        1. If _relativeLine_ > 0, set _state_.[[BindingFromColumn]] to 0.
        1. Set _state_.[[BindingFromColumn]] to _state_.[[BindingFromColumn]] + DecodeUnsignedVlq(|Column|).
        1. Set _state_.[[BindingIndex]] to _state_.[[BindingIndex]] + DecodeSignedVlq(|Vlq|).
        1. Let _binding_ be a new Binding Record.
        1. Set _binding_.[[FromLine]] to _state_.[[BindingFromLine]].
        1. Set _binding_.[[FromColumn]] to _state_.[[BindingFromColumn]].
        1. Set _binding_.[[Binding]] to ResolveExpression(_state_.[[BindingIndex]]).
        1. Append _binding_ to _subRangeBinding_.[[Bindings]].
      </emu-alg>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-format-unknown">
    <h1>Unknown Item Format</h1>
    <p>Unknown items are supported by default.</p>
    <emu-grammar type="definition">
      UnknownItem :
        Tag
        Tag VlqList

      Tag :
        Vlq but not one of `A` `B` `C` `D` `E` `F` `G` `H` `I` `J`
    </emu-grammar>
    <emu-note>This allows both vendor extensions to the scopes format as well as enable future extensions without breaking existing consumers.</emu-note>
  </emu-clause>
</emu-clause>

<emu-annex id="sec-missing">
  <h1>Missing base definitions</h1>
  <p>These definitions should be part of the actual source map spec.</p>
  <emu-grammar type="definition">
    VlqList :
      Vlq
      VlqList Vlq

    Vlq ::
      VlqDigitList

    VlqDigitList ::
      DigitWithoutContinuationBit
      DigitWithContinuationBit VlqDigitList

    DigitWithoutContinuationBit :: one of
      `A` `B` `C` `D` `E` `F` `G` `H` `I` `J` `K` `L` `M` `N` `O` `P` `Q` `R`
      `S` `T` `U` `V` `W` `X` `Y` `Z` `a` `b` `c` `d` `e` `f`

    DigitWithContinuationBit :: one of
      `g` `h` `i` `j` `k` `l` `m` `n` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x`
      `y` `z` `0` `1` `2` `3` `4` `5` `6` `7` `8` `9` `+` `/`
  </emu-grammar>

  <emu-annex id="sec-resolve-name-op" type="host-defined abstract operation">
    <h1>
      ResolveName (
        _index_: a Number,
      ): a String or *null*.
    </h1>
    <dl class="header"></dl>
  </emu-annex>

  <emu-annex id="sec-resolve-expression-op" type="host-defined abstract operation">
    <h1>
      ResolveExpression (
        _index_: a Number,
      ): a String or *null*.
    </h1>
    <dl class="header"></dl>
  </emu-annex>

  <emu-annex id="sec-decode-unsigned-vlq-op" type="abstract operation">
    <h1>
      DecodeUnsignedVlq (
        _encoded_: a String or a ParseNode,
      ): a Number
    </h1>
    <dl class="header"></dl>
  </emu-annex>

  <emu-annex id="sec-decode-signed-vlq-op" type="abstract operation">
    <h1>
      DecodeSignedVlq (
        _encoded_: a String or a ParseNode,
      ): a Number
    </h1>
    <dl class="header"></dl>
  </emu-annex>

  <emu-annex id="sec-decode-signed-vlq-list-op" type="abstract operation">
    <h1>
      DecodeSignedVlqList (
        _encoded_: a |VlqList| ParseNode,
      ): a List of Numbers
    </h1>
    <dl class="header"></dl>
  </emu-annex>
</emu-annex>

<emu-annex id="sec-grammar-summary">
  <h1>Grammar Summary</h1>
  <emu-prodref name="Scopes"></emu-prodref>
  <emu-prodref name="ItemList"></emu-prodref>
  <emu-prodref name="TopLevelItem"></emu-prodref>
  <emu-prodref name="OriginalScopeTree"></emu-prodref>
  <emu-prodref name="OriginalScopeStart"></emu-prodref>
  <emu-prodref name="OriginalScopeEnd"></emu-prodref>
  <emu-prodref name="OriginalScopeItemList"></emu-prodref>
  <emu-prodref name="OriginalScopeItem"></emu-prodref>
  <emu-prodref name="OriginalScopeVariables"></emu-prodref>
  <emu-prodref name="OriginalScopeSourceRef"></emu-prodref>
  <emu-prodref name="GeneratedRangeTree"></emu-prodref>
  <emu-prodref name="GeneratedRangeStart"></emu-prodref>
  <emu-prodref name="GeneratedRangeEnd"></emu-prodref>
  <emu-prodref name="GeneratedRangeItemList"></emu-prodref>
  <emu-prodref name="GeneratedRangeItem"></emu-prodref>
  <emu-prodref name="GeneratedRangeBindings"></emu-prodref>
  <emu-prodref name="SubRangeBinding"></emu-prodref>
  <emu-prodref name="CallSite"></emu-prodref>
  <emu-prodref name="BindingFromList"></emu-prodref>
  <emu-prodref name="BindingFrom"></emu-prodref>
  <emu-prodref name="UnknownItem"></emu-prodref>
  <emu-grammar type="definition" collapsed>
    Line : Vlq

    Column : Vlq

    Flags : Vlq

    Name : Vlq

    Kind : Vlq

    Definition : Vlq

    SourceRef : Vlq

    VariableIndex : Vlq

    Tag : Vlq
  </emu-grammar>
</emu-annex>
